const express = require("express");
const mongoose = require("mongoose");
const { body, validationResult } = require("express-validator");
const Family = require("../models/Family");
const FamilyService = require("../services/familyService");
const { authenticate, authorize } = require("../middleware/auth");

const router = express.Router();

// Appliquer l'authentification √† toutes les routes
router.use(authenticate);

// @route   GET /api/families
// @desc    Obtenir les 50 premi√®res familles
// @access  Private
router.get("/", async (req, res) => {
  try {
    const { limit = 50 } = req.query;

    // Utiliser le service pour r√©cup√©rer les familles format√©es
    const families = await FamilyService.getFamilies(limit);

    res.json(families);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des familles:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// @route   GET /api/families/:id
// @desc    Obtenir une famille par ID
// @access  Private
router.get("/:id", async (req, res) => {
  try {
    const family = await FamilyService.getFamilyById(req.params.id);

    if (!family) {
      return res.status(404).json({ message: "Famille non trouv√©e" });
    }

    res.json({ family });
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration de la famille:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// @route   GET /api/families/stats
// @desc    Obtenir les statistiques des familles
// @access  Private
router.get("/stats", async (req, res) => {
  try {
    const familiesStats = await FamilyService.getFamiliesStats();

    res.json(familiesStats);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des statistiques:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// @route   POST /api/families
// @desc    Cr√©er une nouvelle famille
// @access  Private (Admin)
router.post(
  "/",
  [
    authorize(["admin"]),
    body("primaryContact.firstName")
      .trim()
      .notEmpty()
      .withMessage("Pr√©nom du contact principal requis"),
    body("primaryContact.lastName")
      .trim()
      .notEmpty()
      .withMessage("Nom du contact principal requis"),
    body("primaryContact.primaryPhone")
      .trim()
      .notEmpty()
      .withMessage("T√©l√©phone principal requis"),
    body("primaryContact.email")
      .isEmail()
      .normalizeEmail()
      .withMessage("Email valide requis"),
    body("primaryContact.gender")
      .trim()
      .notEmpty()
      .withMessage("Civilit√© requise")
      .isIn(["M.", "Mme"])
      .withMessage("Civilit√© doit √™tre M. ou Mme"),
    body("address.street").trim().notEmpty().withMessage("Adresse requise"),
    body("address.city").trim().notEmpty().withMessage("Ville requise"),
    body("address.postalCode")
      .trim()
      .notEmpty()
      .withMessage("Code postal requis"),
    body("demande.level")
      .trim()
      .notEmpty()
      .withMessage("Niveau requis")
      .isIn([
        "CP",
        "CE1",
        "CE2",
        "CM1",
        "CM2",
        "6√®me",
        "5√®me",
        "4√®me",
        "3√®me",
        "Seconde",
        "Premi√®re",
        "Terminale",
      ])
      .withMessage("Niveau invalide"),
    // Validation supprim√©e pour financialInfo.paymentMethod (champ supprim√© du mod√®le)
  ],
  async (req, res) => {
    try {
      // V√©rifier les erreurs de validation
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const family = new Family({
        ...req.body,
        createdBy: { userId: req.user._id }, // Structure selon dataFlow.md
      });
      await family.save();

      // Debug: v√©rifier ce qui est dans family apr√®s sauvegarde
      console.log("üîç DEBUG - family apr√®s save():", family);
      console.log("üîç DEBUG - family._id:", family._id);
      console.log("üîç DEBUG - family.primaryContact:", family.primaryContact);
      console.log("üîç DEBUG - family.toObject():", family.toObject());

      res.status(201).json({
        message: "Famille cr√©√©e avec succ√®s",
        family: family.toObject(),
      });
    } catch (error) {
      console.error("Erreur lors de la cr√©ation de la famille:", error);

      // G√©rer les erreurs de validation Mongoose
      if (error.name === "ValidationError") {
        const errors = Object.values(error.errors).map((err) => err.message);
        return res.status(400).json({
          message: errors.join(", "),
          errors: errors,
        });
      }

      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PATCH /api/families/:id
// @desc    Mettre √† jour les champs simples d'une famille (prospectStatus, nextAction, notes)
// @access  Private (Admin)
router.patch(
  "/:id",
  [
    authorize(["admin"]),
    body("prospectStatus")
      .trim()
      .notEmpty()
      .isIn([
        "en_reflexion",
        "interesse_prof_a_trouver",
        "injoignable",
        "ndr_editee",
        "premier_cours_effectue",
        "rdv_prospect",
        "ne_va_pas_convertir",
      ])
      .withMessage("Statut prospect requis et valide"),
    body("nextAction")
      .trim()
      .notEmpty()
      .withMessage("Prochaine action requise"),
    body("notes").optional().trim(),
  ],
  async (req, res) => {
    try {
      // V√©rifier les erreurs de validation
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      // Construire l'objet de mise √† jour avec seulement les champs autoris√©s
      const updateData = {};
      if (req.body.prospectStatus !== undefined) {
        updateData.prospectStatus = req.body.prospectStatus;
      }
      if (req.body.nextAction !== undefined) {
        updateData.nextAction = req.body.nextAction;
      }
      if (req.body.notes !== undefined) {
        updateData.notes = req.body.notes;
      }

      const family = await Family.findByIdAndUpdate(req.params.id, updateData, {
        new: true,
        runValidators: true,
      });

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Famille mise √† jour avec succ√®s",
        family,
      });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de la famille:", error);
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PATCH /api/families/:id/primary-contact
// @desc    Mettre √† jour les informations du contact principal
// @access  Private (Admin)
router.patch(
  "/:id/primary-contact",
  [
    authorize(["admin"]),
    body("firstName").trim().notEmpty().withMessage("Pr√©nom requis"),
    body("lastName").trim().notEmpty().withMessage("Nom requis"),
    body("primaryPhone")
      .trim()
      .notEmpty()
      .withMessage("T√©l√©phone principal requis"),
    body("secondaryPhone").optional().trim(),
    body("email").trim().isEmail().withMessage("Email valide requis"),
    body("birthDate")
      .isISO8601()
      .withMessage("Date de naissance valide requise"),
    body("gender")
      .trim()
      .notEmpty()
      .isIn(["M.", "Mme"])
      .withMessage("Genre requis (M. ou Mme)"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      // Construire l'objet de mise √† jour
      const primaryContactData = {
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        primaryPhone: req.body.primaryPhone,
        email: req.body.email,
        gender: req.body.gender,
      };

      // Ajouter les champs optionnels s'ils sont fournis
      if (req.body.secondaryPhone !== undefined) {
        primaryContactData.secondaryPhone = req.body.secondaryPhone || null;
      }
      if (req.body.birthDate !== undefined) {
        primaryContactData.birthDate = req.body.birthDate
          ? new Date(req.body.birthDate)
          : null;
      }

      const family = await FamilyService.updatePrimaryContact(
        req.params.id,
        primaryContactData
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Contact principal mis √† jour avec succ√®s",
        primaryContact: family.primaryContact,
        family: {
          id: family.id,
          primaryContact: family.primaryContact,
        },
      });
    } catch (error) {
      console.error(
        "Erreur lors de la mise √† jour du contact principal:",
        error
      );
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);
// @route   PATCH /api/families/:id/secondary-contact
// @desc    Mettre √† jour les informations du contact secondaire
// @access  Private (Admin)
router.patch(
  "/:id/secondary-contact",
  [
    authorize(["admin"]),
    body("firstName").trim().notEmpty().withMessage("Pr√©nom requis"),
    body("lastName").trim().notEmpty().withMessage("Nom requis"),
    body("phone").trim().notEmpty().withMessage("T√©l√©phone requis"),
    body("email")
      .trim()
      .notEmpty()
      .isEmail()
      .withMessage("Email valide requis"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const secondaryContactData = {
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        phone: req.body.phone,
        email: req.body.email,
      };

      // Validation m√©tier
      FamilyService.validateSecondaryContactData({
        secondaryContact: secondaryContactData,
      });

      const family = await FamilyService.updateSecondaryContact(
        req.params.id,
        secondaryContactData
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Contact secondaire mis √† jour avec succ√®s",
        secondaryContact: family.secondaryContact,
        family: {
          id: family.id,
          secondaryContact: family.secondaryContact,
        },
      });
    } catch (error) {
      console.error(
        "Erreur lors de la mise √† jour du contact secondaire:",
        error
      );
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PATCH /api/families/:id/demande
// @desc    Mettre √† jour la demande
// @access  Private (Admin)
router.patch(
  "/:id/demande",
  [
    authorize(["admin"]),
    body("level").trim().notEmpty().withMessage("Niveau requis"),
    body("subjects")
      .isArray({ min: 1 })
      .withMessage("Au moins une mati√®re requise"),
    body("subjects.*.id")
      .isMongoId()
      .withMessage("ID de mati√®re invalide (ObjectId requis)"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const demandeData = {
        level: req.body.level,
        subjects: req.body.subjects,
      };

      const family = await FamilyService.updateDemande(
        req.params.id,
        demandeData
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Demande mise √† jour avec succ√®s",
        demande: family.demande,
        family: {
          id: family.id,
          demande: family.demande,
        },
      });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de la demande:", error);
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PATCH /api/families/:id/address
// @desc    Mettre √† jour l'adresse
// @access  Private (Admin)
router.patch(
  "/:id/address",
  [
    authorize(["admin"]),
    body("street").trim().notEmpty().withMessage("Rue requise"),
    body("city").trim().notEmpty().withMessage("Ville requise"),
    body("postalCode").trim().notEmpty().withMessage("Code postal requis"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const addressData = {
        street: req.body.street,
        city: req.body.city,
        postalCode: req.body.postalCode,
      };

      const family = await FamilyService.updateAddress(
        req.params.id,
        addressData
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Adresse mise √† jour avec succ√®s",
        address: family.address,
        family: {
          id: family.id,
          address: family.address,
        },
      });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'adresse:", error);
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PATCH /api/families/:id/billing-address
// @desc    Mettre √† jour l'adresse de facturation
// @access  Private (Admin)
router.patch(
  "/:id/billing-address",
  [
    authorize(["admin"]),
    body("street").trim().notEmpty().withMessage("Rue requise"),
    body("city").trim().notEmpty().withMessage("Ville requise"),
    body("postalCode").trim().notEmpty().withMessage("Code postal requis"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const billingAddressData = {
        street: req.body.street,
        city: req.body.city,
        postalCode: req.body.postalCode,
      };

      const family = await FamilyService.updateBillingAddress(
        req.params.id,
        billingAddressData
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Adresse de facturation mise √† jour avec succ√®s",
        billingAddress: family.billingAddress,
        family: {
          id: family.id,
          billingAddress: family.billingAddress,
        },
      });
    } catch (error) {
      console.error(
        "Erreur lors de la mise √† jour de l'adresse de facturation:",
        error
      );
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PATCH /api/families/:id/company-info
// @desc    Mettre √† jour les informations entreprise
// @access  Private (Admin)
router.patch(
  "/:id/company-info",
  [
    authorize(["admin"]),
    body("urssafNumber").trim().notEmpty().withMessage("Num√©ro URSSAF requis"),
    body("siret").optional().trim(),
    body("ceNumber").optional().trim(),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const companyInfoData = {
        urssafNumber: req.body.urssafNumber,
      };

      const family = await FamilyService.updateCompanyInfo(
        req.params.id,
        companyInfoData
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Informations entreprise mises √† jour avec succ√®s",
        companyInfo: family.companyInfo,
        family: {
          id: family.id,
          companyInfo: family.companyInfo,
        },
      });
    } catch (error) {
      console.error(
        "Erreur lors de la mise √† jour des infos entreprise:",
        error
      );
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

//====================
//SUPPRESSION
//====================

// @route   DELETE /api/families/:id
// @desc    Supprimer une famille
// @access  Private (Admin)
router.delete("/:id", authorize(["admin"]), async (req, res) => {
  try {
    const familyId = req.params.id;

    // Validation de l'ID
    if (!familyId || typeof familyId !== "string") {
      console.log(`‚ùå ID de famille invalide: ${familyId}`);
      return res.status(400).json({
        message: "ID de famille invalide",
        id: familyId,
      });
    }

    // Validation format ObjectId
    const mongoose = require("mongoose");
    if (!mongoose.Types.ObjectId.isValid(familyId)) {
      console.log(`‚ùå Format ObjectId invalide: ${familyId}`);
      return res.status(400).json({
        message: "Format d'ID invalide (doit √™tre un ObjectId MongoDB valide)",
        id: familyId,
      });
    }

    console.log(`üîç Recherche famille pour suppression: ${familyId}`);
    const family = await Family.findById(familyId);

    if (!family) {
      console.log(`‚ùå Famille non trouv√©e: ${familyId}`);
      return res.status(404).json({
        message: "Famille non trouv√©e ou d√©j√† supprim√©e",
        id: familyId,
      });
    }

    console.log(
      `üîç D√©but de la suppression en cascade pour la famille ${req.params.id}`
    );

    // 1. Supprimer tous les coupons individuels li√©s √† cette famille
    const Coupon = require("../models/Coupon");
    const deletedCoupons = await Coupon.deleteMany({
      familyId: req.params.id,
    });
    console.log(
      `üîç ${deletedCoupons.deletedCount} coupons individuels supprim√©s`
    );

    // 2. Supprimer toutes les s√©ries de coupons li√©es √† cette famille
    const CouponSeries = require("../models/CouponSeries");
    const deletedSeries = await CouponSeries.deleteMany({
      familyId: req.params.id,
    });
    console.log(
      `üîç ${deletedSeries.deletedCount} s√©ries de coupons supprim√©es`
    );

    // 3. Supprimer les notes de r√®glement li√©es (NDR)
    const SettlementNote = require("../models/NDR");
    const deletedSettlementNotes = await SettlementNote.deleteMany({
      familyId: req.params.id,
    });
    console.log(
      `üîç ${deletedSettlementNotes.deletedCount} notes de r√®glement supprim√©es`
    );

    // 4. Les √©l√®ves sont maintenant embedded dans la famille (pas de suppression s√©par√©e n√©cessaire)
    const studentsCount = family.students ? family.students.length : 0;
    console.log(
      `üîç ${studentsCount} √©l√®ves embedded seront supprim√©s avec la famille`
    );

    // 5. Supprimer tous les RDV li√©s √† cette famille
    const RendezVous = require("../models/RDV");
    const deletedRdvs = await RendezVous.deleteMany({
      "family.id": req.params.id,
    });
    console.log(`üîç ${deletedRdvs.deletedCount} rendez-vous supprim√©s`);

    // 6. Supprimer la famille elle-m√™me
    await Family.findByIdAndDelete(req.params.id);
    console.log(`üîç Famille ${req.params.id} supprim√©e avec succ√®s`);

    res.json({
      message: "Famille et tous les √©l√©ments li√©s supprim√©s avec succ√®s",
      deletedItems: {
        students: studentsCount, // Students embedded
        couponSeries: deletedSeries.deletedCount,
        coupons: deletedCoupons.deletedCount,
        settlementNotes: deletedSettlementNotes.deletedCount,
        rdvs: deletedRdvs.deletedCount,
      },
    });
  } catch (error) {
    console.error("Erreur lors de la suppression de la famille:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

//_____STUDENTS______

// @route   POST /api/families/:id/students
// @desc    Ajouter un √©l√®ve embedded √† une famille existante (selon dataFlow.md)
// @access  Private (Admin)
router.post(
  "/:id/students",
  [
    authorize(["admin"]),
    // Validation technique : types et formats
    body("firstName").trim().notEmpty().withMessage("Pr√©nom de l'√©l√®ve requis"),
    body("lastName").trim().notEmpty().withMessage("Nom de l'√©l√®ve requis"),
    body("birthDate")
      .isISO8601()
      .withMessage("Date de naissance valide requise"),
    body("school.name").optional().trim(),
    body("school.grade").optional().trim(),
    body("contact.phone").optional().trim(),
    body("contact.email")
      .optional()
      .trim()
      .isEmail()
      .withMessage("Email invalide si fourni"),
    body("address.street").optional().trim(),
    body("address.city").optional().trim(),
    body("address.postalCode").optional().trim(),
    body("availability").optional().trim(),
    body("notes").optional().trim(),
  ],
  async (req, res) => {
    try {
      // V√©rifier les erreurs de validation technique
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      // Validation m√©tier
      FamilyService.validateStudentData(req.body);

      // Cr√©er l'√©l√®ve embedded avec un nouvel ObjectId
      const studentData = {
        id: new mongoose.Types.ObjectId(),
        ...req.body,
      };

      // Ajouter l'√©l√®ve au tableau students de la famille
      const family = await Family.findByIdAndUpdate(
        req.params.id,
        { $push: { students: studentData } },
        { new: true, runValidators: true }
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      console.log(
        `‚úÖ √âl√®ve ${studentData.firstName} ${studentData.lastName} ajout√© √† la famille ${req.params.id}`
      );

      res.status(201).json({
        message: "√âl√®ve ajout√© avec succ√®s √† la famille",
        student: studentData,
      });
    } catch (error) {
      console.error("Erreur lors de l'ajout de l'√©l√®ve:", error);

      // G√©rer les erreurs de validation Mongoose
      if (error.name === "ValidationError") {
        const errors = Object.values(error.errors).map((err) => err.message);
        return res.status(400).json({
          message: "Erreur de validation : " + errors.join(", "),
          errors: errors,
        });
      }

      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PATCH /api/families/:id/students/:studentId
// @desc    Modifier un √©l√®ve embedded dans une famille (selon dataFlow.md)
// @access  Private (Admin)
router.patch(
  "/:id/students/:studentId",
  [
    authorize(["admin"]),
    // Validation technique : types et formats (tous optionnels pour PATCH)
    body("firstName")
      .optional()
      .trim()
      .notEmpty()
      .withMessage("Pr√©nom de l'√©l√®ve requis si fourni"),
    body("lastName")
      .optional()
      .trim()
      .notEmpty()
      .withMessage("Nom de l'√©l√®ve requis si fourni"),
    body("birthDate")
      .optional()
      .isISO8601()
      .withMessage("Date de naissance valide requise"),
    body("school.name").optional().trim(),
    body("school.grade").optional().trim(),
    body("contact.phone").optional().trim(),
    body("contact.email")
      .optional()
      .trim()
      .isEmail()
      .withMessage("Email invalide si fourni"),
    body("address.street").optional().trim(),
    body("address.city").optional().trim(),
    body("address.postalCode").optional().trim(),
    body("availability").optional().trim(),
    body("notes").optional().trim(),
  ],
  async (req, res) => {
    try {
      const { id: familyId, studentId } = req.params;

      console.log(
        `‚úèÔ∏è [UPDATE STUDENT] Tentative de modification - Famille: ${familyId}, √âl√®ve: ${studentId}`
      );

      // V√©rifier les erreurs de validation technique
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      // Validation m√©tier (pour les champs fournis dans la mise √† jour)
      FamilyService.validateStudentData(req.body);

      // Trouver la famille
      const family = await Family.findById(familyId);
      if (!family) {
        console.error(`‚ùå [UPDATE STUDENT] Famille non trouv√©e: ${familyId}`);
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      // Trouver l'√©l√®ve dans le tableau
      const studentIndex = family.students.findIndex(
        (s) => s.id.toString() === studentId
      );
      if (studentIndex === -1) {
        console.error(`‚ùå [UPDATE STUDENT] √âl√®ve non trouv√©: ${studentId}`);
        return res
          .status(404)
          .json({ message: "√âl√®ve non trouv√© dans cette famille" });
      }

      const oldStudent = family.students[studentIndex];
      console.log(
        `üîÑ [UPDATE STUDENT] Modification de l'√©l√®ve ${oldStudent.firstName} ${oldStudent.lastName}...`
      );

      // Pr√©parer les nouvelles donn√©es de l'√©l√®ve
      const updatedStudentData = {
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        birthDate: new Date(req.body.birthDate),
        school: {
          name: req.body.school.name,
          grade: req.body.school.grade,
        },
        contact: req.body.contact || oldStudent.contact,
        address: req.body.address || oldStudent.address,
        availability: req.body.availability || oldStudent.availability,
        notes: req.body.notes || oldStudent.notes,
      };

      // Mettre √† jour l'√©l√®ve dans le tableau
      family.students[studentIndex] = {
        ...oldStudent.toObject(),
        ...updatedStudentData,
      };

      // Sauvegarder la famille
      const updatedFamily = await family.save();

      console.log(
        `‚úÖ [UPDATE STUDENT] √âl√®ve modifi√© avec succ√®s: ${updatedStudentData.firstName} ${updatedStudentData.lastName}`
      );

      res.status(200).json({
        message: "√âl√®ve modifi√© avec succ√®s",
        student: family.students[studentIndex],
        family: {
          id: updatedFamily._id,
          primaryContact: {
            firstName: updatedFamily.primaryContact.firstName,
            lastName: updatedFamily.primaryContact.lastName,
          },
          studentsCount: updatedFamily.students.length,
        },
      });
    } catch (error) {
      console.error("‚ùå [UPDATE STUDENT] Erreur:", error);
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   DELETE /api/families/:id/students/:studentId
// @desc    Supprimer un √©l√®ve embedded  (selon dataFlow.md)
// @access  Private (Admin)
router.delete(
  "/:id/students/:studentId",
  authorize(["admin"]),
  async (req, res) => {
    try {
      const { id: familyId, studentId } = req.params;

      console.log(
        `üóëÔ∏è [DELETE STUDENT] Tentative de suppression - Famille: ${familyId}, √âl√®ve: ${studentId}`
      );

      // Validation des IDs ObjectId
      if (!mongoose.Types.ObjectId.isValid(familyId)) {
        console.error(`‚ùå [DELETE STUDENT] ID famille invalide: ${familyId}`);
        return res.status(400).json({ message: "ID de famille invalide" });
      }

      if (!mongoose.Types.ObjectId.isValid(studentId)) {
        console.error(`‚ùå [DELETE STUDENT] ID √©l√®ve invalide: ${studentId}`);
        return res.status(400).json({ message: "ID d'√©l√®ve invalide" });
      }

      // Trouver et supprimer l'√©l√®ve du tableau students
      const family = await Family.findById(familyId);
      if (!family) {
        console.error(`‚ùå [DELETE STUDENT] Famille non trouv√©e: ${familyId}`);
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      // Trouver l'√©l√®ve dans le tableau
      const student = family.students.find(
        (s) => s.id.toString() === studentId
      );
      if (!student) {
        console.error(`‚ùå [DELETE STUDENT] √âl√®ve non trouv√©: ${studentId}`);
        return res
          .status(404)
          .json({ message: "√âl√®ve non trouv√© dans cette famille" });
      }

      console.log(
        `üîÑ [DELETE STUDENT] Suppression de l'√©l√®ve ${student.firstName} ${student.lastName} de la famille...`
      );

      // Supprimer l'√©l√®ve du tableau students
      const updatedFamily = await Family.findByIdAndUpdate(
        familyId,
        { $pull: { students: { id: studentId } } },
        { new: true }
      );

      if (!updatedFamily) {
        console.error(
          `‚ùå [DELETE STUDENT] √âchec de la mise √† jour de la famille ${familyId}`
        );
        return res
          .status(500)
          .json({ message: "Erreur lors de la mise √† jour de la famille" });
      }

      console.log(
        `‚úÖ [DELETE STUDENT] √âl√®ve ${student.firstName} ${student.lastName} supprim√© avec succ√®s de la famille ${familyId}`
      );

      res.json({
        message: "√âl√®ve supprim√© avec succ√®s de la famille",
        deletedStudent: {
          id: studentId,
          name: `${student.firstName} ${student.lastName}`,
        },
      });
    } catch (error) {
      console.error(
        "‚ùå [DELETE STUDENT] Erreur lors de la suppression de l'√©l√®ve:",
        error
      );
      console.error("‚ùå [DELETE STUDENT] Stack trace:", error.stack);
      res.status(500).json({
        message: "Erreur serveur lors de la suppression de l'√©l√®ve",
        error:
          process.env.NODE_ENV === "development" ? error.message : undefined,
      });
    }
  }
);

module.exports = router;

// @route   GET /api/families/:id/deletion-preview
// @desc    Aper√ßu des √©l√©ments qui seront supprim√©s avec la famille
// @access  Private (Admin)
// router.get("/:id/deletion-preview", authorize(["admin"]), async (req, res) => {
//   try {
//     const family = await Family.findById(req.params.id);

//     if (!family) {
//       return res.status(404).json({ message: "Famille non trouv√©e" });
//     }

//     console.log(`üîç Aper√ßu de suppression pour la famille ${req.params.id}`);

//     // Compter les √©l√©ments li√©s
//     const Coupon = require("../models/Coupon");
//     const CouponSeries = require("../models/CouponSeries");
//     const SettlementNote = require("../models/NDR");

//     // Les students sont maintenant embedded dans la famille
//     const studentsCount = family.students ? family.students.length : 0;
//     const studentsDetails = family.students || [];

//     const [couponsCount, seriesCount, settlementNotesCount] = await Promise.all(
//       [
//         Coupon.countDocuments({ familyId: req.params.id }),
//         CouponSeries.countDocuments({ familyId: req.params.id }),
//         SettlementNote.countDocuments({ familyId: req.params.id }),
//       ]
//     );

//     // R√©cup√©rer les d√©tails des √©l√©ments li√©s
//     const [couponsDetails, seriesDetails, settlementNotesDetails] =
//       await Promise.all([
//         Coupon.find({ familyId: req.params.id }).select("code status").lean(),
//         CouponSeries.find({ familyId: req.params.id })
//           .populate("subject", "name")
//           .select("totalCoupons usedCoupons hourlyRate status subject")
//           .lean(),
//         SettlementNote.find({ familyId: req.params.id })
//           .select(
//             "clientName subjects.quantity subjects.hourlyRate status createdAt"
//           )
//           .lean(),
//       ]);

//     const deletionPreview = {
//       family: {
//         name: `${family.primaryContact.firstName} ${family.primaryContact.lastName}`,
//         status: family.status,
//         prospectStatus: family.prospectStatus,
//       },
//       itemsToDelete: {
//         students: {
//           count: studentsCount,
//           details: studentsDetails.map((s) => ({
//             name: `${s.firstName} ${s.lastName}`,
//             grade: s.school?.grade || "Non pr√©cis√©",
//           })),
//         },
//         couponSeries: {
//           count: seriesCount,
//           details: seriesDetails.map((s) => ({
//             subject: s.subject?.name || "Mati√®re non pr√©cis√©e",
//             totalCoupons: s.totalCoupons,
//             usedCoupons: s.usedCoupons,
//             remainingCoupons: s.totalCoupons - s.usedCoupons,
//             hourlyRate: s.hourlyRate,
//             status: s.status,
//           })),
//         },
//         coupons: {
//           count: couponsCount,
//           availableCount: couponsDetails.filter((c) => c.status === "available")
//             .length,
//           usedCount: couponsDetails.filter((c) => c.status === "used").length,
//         },
//         settlementNotes: {
//           count: settlementNotesCount,
//           details: settlementNotesDetails.map((ndr) => ({
//             clientName: ndr.clientName,
//             totalHours:
//               ndr.subjects?.reduce((sum, s) => sum + (s.quantity || 0), 0) || 0,
//             totalAmount:
//               ndr.subjects?.reduce(
//                 (sum, s) => sum + (s.quantity || 0) * (s.hourlyRate || 0),
//                 0
//               ) || 0,
//             status: ndr.status,
//             date: new Date(ndr.createdAt).toLocaleDateString("fr-FR"),
//           })),
//         },
//       },
//       totalItems:
//         studentsCount + seriesCount + couponsCount + settlementNotesCount,
//     };

//     console.log(
//       `üîç Aper√ßu calcul√©: ${deletionPreview.totalItems} √©l√©ments √† supprimer`
//     );
//     res.json(deletionPreview);
//   } catch (error) {
//     console.error("Erreur lors du calcul de l'aper√ßu de suppression:", error);
//     res.status(500).json({ message: "Erreur serveur" });
//   }
// });
