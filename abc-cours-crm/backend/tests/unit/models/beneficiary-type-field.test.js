/**
 * Tests sp√©cifiques pour le champ Type de b√©n√©ficiaire dans la popup
 * Teste l'affichage et le fonctionnement du champ beneficiaryType ajout√©
 * Commande : npm test beneficiary-type-field.test.js
 */

const request = require('supertest');
const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');
const app = require('../../integration/app.test');
const Family = require('../../../models/Family');
const User = require('../../../models/User');
const Subject = require('../../../models/Subject');

describe('üìã TESTS CHAMP TYPE DE B√âN√âFICIAIRE', () => {
  let mongoServer;
  let adminToken;
  let testUserId;

  // ========== SETUP/TEARDOWN ==========
  beforeAll(async () => {
    // Configuration JWT pour les tests
    process.env.JWT_SECRET = 'test_secret_key_for_beneficiary_field';
    
    // D√©marrer MongoDB Memory Server
    mongoServer = await MongoMemoryServer.create();
    const mongoUri = mongoServer.getUri();
    
    // Connecter Mongoose √† la base temporaire
    await mongoose.connect(mongoUri);
    
    console.log('üìä Base de donn√©es temporaire initialis√©e pour tests champ b√©n√©ficiaire');
    
    // Cr√©er utilisateur admin test
    const bcrypt = require('bcryptjs');
    const hashedPassword = await bcrypt.hash('test123', 10);
    
    const adminUser = await User.create({
      firstName: 'Test',
      lastName: 'BeneficiaryField',
      email: 'test.beneficiary@field.com',
      password: hashedPassword,
      role: 'admin',
      isActive: true,
    });
    testUserId = adminUser._id;
    
    // G√©n√©rer token admin
    const jwt = require('jsonwebtoken');
    adminToken = jwt.sign(
      { userId: testUserId },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    console.log('üîë Utilisateur admin test cr√©√© pour champ b√©n√©ficiaire');
    
    // Cr√©er quelques mati√®res de test
    const subjects = [
      { name: 'Math√©matiques', isActive: true },
      { name: 'Fran√ßais', isActive: true },
      { name: 'Anglais', isActive: true },
    ];
    
    await Subject.create(subjects);
    console.log('üìö Mati√®res fixtures cr√©√©es pour champ b√©n√©ficiaire');
  });

  afterAll(async () => {
    await mongoose.connection.dropDatabase();
    await mongoose.connection.close();
    await mongoServer.stop();
    console.log('üóëÔ∏è Base de donn√©es temporaire nettoy√©e');
  });

  beforeEach(async () => {
    // Nettoyer les familles avant chaque test
    await Family.deleteMany({});
  });

  // ========== TESTS CHAMP BENEFICIARY TYPE ==========
  describe('Tests du champ Type de b√©n√©ficiaire', () => {
    
    test('‚úÖ Cr√©ation prospect avec beneficiaryType "adulte"', async () => {
      console.log('\nüéØ TEST: BeneficiaryType ADULTE');
      console.log('===============================');
      
      const prospectData = {
        address: { 
          street: '123 Rue Adulte Test', 
          city: 'Paris', 
          postalCode: '75001' 
        },
        primaryContact: { 
          firstName: 'Jean', 
          lastName: 'AdulteTest',
          primaryPhone: '0142123456',
          email: 'jean.adulte@test.fr',
          gender: 'M.'
        },
        demande: {
          beneficiaryType: 'adulte', // ‚úÖ Champ maintenant pr√©sent
          subjects: ['Anglais', 'Fran√ßais'],
          notes: 'Cours du soir pour adulte'
        },
        plannedTeacher: 'Prof. Langues',
        status: 'prospect',
        createdBy: testUserId,
      };

      console.log('üìã Type de b√©n√©ficiaire:', prospectData.demande.beneficiaryType);

      const response = await request(app)
        .post('/api/families')
        .set('Authorization', `Bearer ${adminToken}`)
        .set('x-test-mode', 'true')
        .send(prospectData)
        .expect(201);

      // V√©rifications sp√©cifiques
      expect(response.body.family).toBeDefined();
      expect(response.body.family.demande.beneficiaryType).toBe('adulte');
      expect(response.body.family.demande.subjects).toEqual(['Anglais', 'Fran√ßais']);
      expect(response.body.family.demande.notes).toBe('Cours du soir pour adulte');
      expect(response.body.family.plannedTeacher).toBe('Prof. Langues');
      
      console.log('‚úÖ Prospect adulte cr√©√© avec succ√®s');
      console.log('üìä Donn√©es sauvegard√©es:', {
        beneficiaryType: response.body.family.demande.beneficiaryType,
        subjects: response.body.family.demande.subjects,
        plannedTeacher: response.body.family.plannedTeacher
      });
      console.log('===============================\n');
    });

    test('‚úÖ Cr√©ation prospect avec beneficiaryType "eleves"', async () => {
      console.log('\nüéØ TEST: BeneficiaryType √âL√àVES');
      console.log('===============================');
      
      const prospectData = {
        address: { 
          street: '456 Avenue √âl√®ves', 
          city: 'Lyon', 
          postalCode: '69000' 
        },
        primaryContact: { 
          firstName: 'Marie', 
          lastName: 'ParentTest',
          primaryPhone: '0472987654',
          email: 'marie.parent@test.fr',
          gender: 'Mme'
        },
        demande: {
          beneficiaryType: 'eleves', // ‚úÖ Type √©l√®ves
          subjects: ['Math√©matiques', 'Physique'],
          notes: 'Soutien scolaire niveau coll√®ge'
        },
        status: 'prospect',
        createdBy: testUserId,
      };

      console.log('üìã Type de b√©n√©ficiaire:', prospectData.demande.beneficiaryType);

      const response = await request(app)
        .post('/api/families')
        .set('Authorization', `Bearer ${adminToken}`)
        .set('x-test-mode', 'true')
        .send(prospectData)
        .expect(201);

      expect(response.body.family.demande.beneficiaryType).toBe('eleves');
      expect(response.body.family.demande.subjects).toEqual(['Math√©matiques', 'Physique']);
      
      console.log('‚úÖ Prospect √©l√®ves cr√©√© avec succ√®s');
      console.log('üìä Donn√©es sauvegard√©es:', {
        beneficiaryType: response.body.family.demande.beneficiaryType,
        subjects: response.body.family.demande.subjects
      });
      console.log('===============================\n');
    });

    test('‚ùå Erreur avec beneficiaryType invalide', async () => {
      console.log('\nüéØ TEST: BeneficiaryType INVALIDE');
      console.log('=================================');
      
      const invalidData = {
        address: { street: '789 Rue Invalide', city: 'Test', postalCode: '12345' },
        primaryContact: { 
          firstName: 'Test', 
          lastName: 'InvalidType',
          primaryPhone: '0123456789',
          email: 'invalid@test.fr',
          gender: 'M.'
        },
        demande: {
          beneficiaryType: 'type_invalide', // ‚ùå Type non autoris√©
          subjects: ['Test']
        },
        status: 'prospect',
        createdBy: testUserId,
      };

      console.log('üìã Type invalide test√©:', invalidData.demande.beneficiaryType);

      const response = await request(app)
        .post('/api/families')
        .set('Authorization', `Bearer ${adminToken}`)
        .set('x-test-mode', 'true')
        .send(invalidData)
        .expect(400);

      expect(response.body.message).toBeDefined();
      console.log('‚úÖ Erreur d√©tect√©e pour type invalide:', response.body.message);
      console.log('=================================\n');
    });

    test('‚úÖ Champ beneficiaryType obligatoire - Plus d\'erreur', async () => {
      console.log('\nüéØ TEST: BeneficiaryType OBLIGATOIRE (maintenant pr√©sent)');
      console.log('======================================================');
      
      // Maintenant que le champ est dans EntityForm, il devrait √™tre fourni
      // Ce test v√©rifie qu'avec le champ pr√©sent, plus d'erreur
      const completeData = {
        address: { 
          street: '321 Rue Compl√®te', 
          city: 'Marseille', 
          postalCode: '13000' 
        },
        primaryContact: { 
          firstName: 'Complet', 
          lastName: 'TestOK',
          primaryPhone: '0491555777',
          email: 'complet@test.fr',
          gender: 'M.'
        },
        demande: {
          beneficiaryType: 'adulte', // ‚úÖ Pr√©sent gr√¢ce au nouveau champ
          subjects: ['Math√©matiques'],
          notes: 'Test champ obligatoire'
        },
        status: 'prospect',
        createdBy: testUserId,
      };

      console.log('üìã Donn√©es compl√®tes avec beneficiaryType:', 
        completeData.demande.beneficiaryType);

      const response = await request(app)
        .post('/api/families')
        .set('Authorization', `Bearer ${adminToken}`)
        .set('x-test-mode', 'true')
        .send(completeData)
        .expect(201); // ‚úÖ Succ√®s car champ pr√©sent

      expect(response.body.family.demande.beneficiaryType).toBe('adulte');
      console.log('‚úÖ Plus d\'erreur car beneficiaryType pr√©sent dans le formulaire');
      console.log('======================================================\n');
    });

  });

  // ========== TESTS INT√âGRATION CHAMPS DEMANDE ==========
  describe('Tests int√©gration des champs demande', () => {
    
    test('‚úÖ Tous les champs de demande fonctionnent ensemble', async () => {
      console.log('\nüéØ TEST: INT√âGRATION CHAMPS DEMANDE');
      console.log('===================================');
      
      const fullDemandeData = {
        address: { 
          street: '654 Rue Int√©gration', 
          city: 'Toulouse', 
          postalCode: '31000' 
        },
        primaryContact: { 
          firstName: 'Int√©gration', 
          lastName: 'TestComplet',
          primaryPhone: '0561444666',
          email: 'integration@test.fr',
          gender: 'Mme'
        },
        demande: {
          beneficiaryType: 'eleves', // Nouveau champ
          subjects: ['Fran√ßais', 'Histoire', 'G√©ographie'], // Mati√®res multiples
          notes: 'Notes d√©taill√©es sur la demande de cours pour √©l√®ves' // Notes demande
        },
        plannedTeacher: 'Prof. Litt√©raire', // Professeur pr√©vu
        notes: 'Notes g√©n√©rales sur la famille', // Notes g√©n√©rales
        status: 'prospect',
        createdBy: testUserId,
      };

      console.log('üìã Champs demande test√©s:', {
        beneficiaryType: fullDemandeData.demande.beneficiaryType,
        subjects: fullDemandeData.demande.subjects,
        demandeNotes: !!fullDemandeData.demande.notes,
        plannedTeacher: !!fullDemandeData.plannedTeacher,
        generalNotes: !!fullDemandeData.notes
      });

      const response = await request(app)
        .post('/api/families')
        .set('Authorization', `Bearer ${adminToken}`)
        .set('x-test-mode', 'true')
        .send(fullDemandeData)
        .expect(201);

      // V√©rifier que tous les champs sont sauvegard√©s
      const family = response.body.family;
      expect(family.demande.beneficiaryType).toBe('eleves');
      expect(family.demande.subjects).toEqual(['Fran√ßais', 'Histoire', 'G√©ographie']);
      expect(family.demande.notes).toBe('Notes d√©taill√©es sur la demande de cours pour √©l√®ves');
      expect(family.plannedTeacher).toBe('Prof. Litt√©raire');
      expect(family.notes).toBe('Notes g√©n√©rales sur la famille');

      console.log('‚úÖ Tous les champs demande int√©gr√©s avec succ√®s');
      console.log('üìä Structure finale:', {
        demande: {
          beneficiaryType: family.demande.beneficiaryType,
          subjects: family.demande.subjects.length + ' mati√®res',
          hasNotes: !!family.demande.notes
        },
        plannedTeacher: family.plannedTeacher,
        hasGeneralNotes: !!family.notes
      });
      console.log('===================================\n');
    });

  });

});

// ========== R√âSUM√â FINAL ==========
afterAll(() => {
  console.log(`
  üìä R√âSUM√â TESTS CHAMP TYPE DE B√âN√âFICIAIRE
  ==========================================
  ‚úÖ Champ beneficiaryType ajout√© √† EntityForm
  ‚úÖ Valeurs "adulte" et "eleves" fonctionnelles
  ‚úÖ Champ obligatoire - plus d'erreur de validation
  ‚úÖ Int√©gration compl√®te avec autres champs demande
  
  üìã CHAMPS DEMANDE VALID√âS:
  - demande.beneficiaryType (select obligatoire)
  - demande.subjects (text obligatoire) 
  - demande.notes (textarea optionnel)
  - plannedTeacher (text optionnel)
  - notes g√©n√©rales (textarea optionnel)
  
  üé® POPUP COMPL√àTE:
  - Section "Demande de cours" maintenant visible
  - Type de b√©n√©ficiaire s√©lectionnable
  - Plus d'erreur "Type de b√©n√©ficiaire requis"
  
  üîÑ PR√äT POUR TESTS UI POPUP
  `);
});