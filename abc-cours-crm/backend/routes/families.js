const express = require("express");
const { body, validationResult } = require("express-validator");
const Family = require("../models/Family");
const Student = require("../models/Student");
const { authenticate, authorize } = require("../middleware/auth");

const router = express.Router();

// Appliquer l'authentification √† toutes les routes
router.use(authenticate);

// @route   GET /api/families
// @desc    Obtenir toutes les familles
// @access  Private
router.get("/", async (req, res) => {
  try {
    const { page = 1, limit = 10, search, status } = req.query;

    // Construire le filtre
    const filter = {};
    if (search) {
      filter.$or = [
        { "primaryContact.lastName": { $regex: search, $options: "i" } },
        { "primaryContact.firstName": { $regex: search, $options: "i" } },
        { "primaryContact.email": { $regex: search, $options: "i" } },
        { "primaryContact.primaryPhone": { $regex: search, $options: "i" } },
      ];
    }
    if (status) {
      filter.status = status;
    }

    // Pagination
    const skip = (page - 1) * limit;

    const families = await Family.find(filter)
      .populate('students', 'firstName lastName school.grade school.level')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    const total = await Family.countDocuments(filter);

    res.json({
      families,
      pagination: {
        current: parseInt(page),
        total: Math.ceil(total / limit),
        hasNext: page * limit < total,
        hasPrev: page > 1,
      },
    });
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des familles:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// @route   GET /api/families/stats
// @desc    Obtenir les statistiques des familles
// @access  Private
router.get("/stats", async (req, res) => {
  try {
    const [total, prospects, clients] = await Promise.all([
      Family.countDocuments(),
      Family.countDocuments({ status: "prospect" }),
      Family.countDocuments({ status: "client" }),
    ]);

    res.json({
      total,
      prospects,
      clients,
    });
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des statistiques:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// @route   GET /api/families/:id
// @desc    Obtenir une famille par ID
// @access  Private
router.get("/:id", async (req, res) => {
  try {
    const family = await Family.findById(req.params.id);

    if (!family) {
      return res.status(404).json({ message: "Famille non trouv√©e" });
    }

    // R√©cup√©rer les √©l√®ves de cette famille
    const students = await Student.find({ family: family._id })
      .select("firstName lastName level")
      .lean();

    // Ajouter les √©l√®ves √† la r√©ponse
    const familyWithStudents = {
      ...family.toObject(),
      students,
    };

    res.json({ family: familyWithStudents });
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration de la famille:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// @route   POST /api/families
// @desc    Cr√©er une nouvelle famille
// @access  Private (Admin)
router.post(
  "/",
  [
    authorize(["admin"]),
    body("primaryContact.firstName")
      .trim()
      .notEmpty()
      .withMessage("Pr√©nom du contact principal requis"),
    body("primaryContact.lastName")
      .trim()
      .notEmpty()
      .withMessage("Nom du contact principal requis"),
    body("primaryContact.primaryPhone")
      .trim()
      .notEmpty()
      .withMessage("T√©l√©phone principal requis"),
    body("primaryContact.email")
      .isEmail()
      .normalizeEmail()
      .withMessage("Email valide requis"),
    body("primaryContact.gender")
      .trim()
      .notEmpty()
      .withMessage("Civilit√© requise")
      .isIn(["M.", "Mme"])
      .withMessage("Civilit√© doit √™tre M. ou Mme"),
    body("address.street").trim().notEmpty().withMessage("Adresse requise"),
    body("address.city").trim().notEmpty().withMessage("Ville requise"),
    body("address.postalCode")
      .trim()
      .notEmpty()
      .withMessage("Code postal requis"),
    // Validation supprim√©e pour financialInfo.paymentMethod (champ supprim√© du mod√®le)
  ],
  async (req, res) => {
    try {
      // V√©rifier les erreurs de validation
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const family = new Family({
        ...req.body,
        createdBy: req.user._id, // Ajouter automatiquement l'ID de l'utilisateur cr√©ateur
      });
      await family.save();

      // Debug: v√©rifier ce qui est dans family apr√®s sauvegarde
      console.log("üîç DEBUG - family apr√®s save():", family);
      console.log("üîç DEBUG - family._id:", family._id);
      console.log("üîç DEBUG - family.primaryContact:", family.primaryContact);
      console.log("üîç DEBUG - family.toObject():", family.toObject());

      res.status(201).json({
        message: "Famille cr√©√©e avec succ√®s",
        family: family.toObject(),
      });
    } catch (error) {
      console.error("Erreur lors de la cr√©ation de la famille:", error);
      
      // G√©rer les erreurs de validation Mongoose
      if (error.name === 'ValidationError') {
        const errors = Object.values(error.errors).map(err => err.message);
        return res.status(400).json({ 
          message: errors.join(', '),
          errors: errors 
        });
      }
      
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PUT /api/families/:id
// @desc    Mettre √† jour une famille
// @access  Private (Admin)
router.put(
  "/:id",
  [
    authorize(["admin"]),
    body("primaryContact.firstName").optional().trim().notEmpty(),
    body("primaryContact.lastName").optional().trim().notEmpty(),
    body("primaryContact.email").optional().isEmail().normalizeEmail(),
    body("primaryContact.primaryPhone").optional().trim().notEmpty(),
  ],
  async (req, res) => {
    try {
      // V√©rifier les erreurs de validation
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const family = await Family.findByIdAndUpdate(req.params.id, req.body, {
        new: true,
        runValidators: true,
      });

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Famille mise √† jour avec succ√®s",
        family,
      });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de la famille:", error);
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PATCH /api/families/:id/status
// @desc    Mettre √† jour le statut d'une famille
// @access  Private (Admin)
router.patch(
  "/:id/status",
  [
    authorize(["admin"]),
    body("status")
      .isIn(["prospect", "client"])
      .withMessage("Statut doit √™tre 'prospect' ou 'client'"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const family = await Family.findByIdAndUpdate(
        req.params.id,
        { status: req.body.status },
        { new: true, runValidators: true }
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Statut mis √† jour avec succ√®s",
        family,
      });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour du statut:", error);
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PATCH /api/families/:id/prospect-status
// @desc    Mettre √† jour le statut prospect d'une famille
// @access  Private (Admin)
router.patch(
  "/:id/prospect-status",
  [
    authorize(["admin"]),
    body("prospectStatus")
      .optional()
      .isIn([
        "en_reflexion",
        "interesse_prof_a_trouver", 
        "injoignable",
        "ndr_editee",
        "premier_cours_effectue",
        "rdv_prospect",
        "ne_va_pas_convertir"
      ])
      .withMessage("Statut prospect invalide"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const { prospectStatus } = req.body;
      
      const family = await Family.findByIdAndUpdate(
        req.params.id,
        { 
          prospectStatus: prospectStatus || null,
          updatedAt: new Date()
        },
        { new: true, runValidators: true }
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Statut prospect mis √† jour avec succ√®s",
        family,
      });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour du statut prospect:", error);
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   PATCH /api/families/:id/reminder-subject
// @desc    Mettre √† jour l'objet du rappel d'une famille
// @access  Private (Admin)
router.patch(
  "/:id/reminder-subject",
  [
    authorize(["admin"]),
    body("nextActionReminderSubject")
      .optional()
      .isIn([
        "Actions √† d√©finir",
        "Pr√©senter nos cours",
        "Envoyer le devis",
        "Relancer apr√®s devis",
        "Planifier rendez-vous",
        "Editer la NDR",
        "N√©gocier les tarifs",
        "Organiser cours d'essai",
        "Confirmer les disponibilit√©s",
        "Suivre satisfaction parent"
      ])
      .withMessage("Objet de rappel invalide"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const { nextActionReminderSubject } = req.body;
      
      const family = await Family.findByIdAndUpdate(
        req.params.id,
        { 
          nextActionReminderSubject: nextActionReminderSubject || "Actions √† d√©finir",
          updatedAt: new Date()
        },
        { new: true, runValidators: true }
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Objet du rappel mis √† jour avec succ√®s",
        family,
      });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de l'objet du rappel:", error);
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

// @route   GET /api/families/:id/deletion-preview
// @desc    Aper√ßu des √©l√©ments qui seront supprim√©s avec la famille
// @access  Private (Admin)
router.get("/:id/deletion-preview", authorize(["admin"]), async (req, res) => {
  try {
    const family = await Family.findById(req.params.id);

    if (!family) {
      return res.status(404).json({ message: "Famille non trouv√©e" });
    }

    console.log(`üîç Aper√ßu de suppression pour la famille ${req.params.id}`);

    // Compter les √©l√©ments li√©s
    const Coupon = require("../models/Coupon");
    const CouponSeries = require("../models/CouponSeries");
    const SettlementNote = require("../models/SettlementNote");

    const [couponsCount, seriesCount, settlementNotesCount, studentsCount] = await Promise.all([
      Coupon.countDocuments({ familyId: req.params.id }),
      CouponSeries.countDocuments({ familyId: req.params.id }),
      SettlementNote.countDocuments({ familyId: req.params.id }),
      Student.countDocuments({ family: req.params.id })
    ]);

    // R√©cup√©rer les d√©tails des √©l√©ments li√©s
    const [couponsDetails, seriesDetails, settlementNotesDetails, studentsDetails] = await Promise.all([
      Coupon.find({ familyId: req.params.id }).select("code status").lean(),
      CouponSeries.find({ familyId: req.params.id })
        .populate("subject", "name")
        .select("totalCoupons usedCoupons hourlyRate status subject")
        .lean(),
      SettlementNote.find({ familyId: req.params.id })
        .select("clientName subjects.quantity subjects.hourlyRate status createdAt")
        .lean(),
      Student.find({ family: req.params.id })
        .select("firstName lastName school.grade")
        .lean()
    ]);

    const deletionPreview = {
      family: {
        name: `${family.primaryContact.firstName} ${family.primaryContact.lastName}`,
        status: family.status,
        prospectStatus: family.prospectStatus
      },
      itemsToDelete: {
        students: {
          count: studentsCount,
          details: studentsDetails.map(s => ({
            name: `${s.firstName} ${s.lastName}`,
            grade: s.school?.grade || "Non pr√©cis√©"
          }))
        },
        couponSeries: {
          count: seriesCount,
          details: seriesDetails.map(s => ({
            subject: s.subject?.name || "Mati√®re non pr√©cis√©e",
            totalCoupons: s.totalCoupons,
            usedCoupons: s.usedCoupons,
            remainingCoupons: s.totalCoupons - s.usedCoupons,
            hourlyRate: s.hourlyRate,
            status: s.status
          }))
        },
        coupons: {
          count: couponsCount,
          availableCount: couponsDetails.filter(c => c.status === 'available').length,
          usedCount: couponsDetails.filter(c => c.status === 'used').length
        },
        settlementNotes: {
          count: settlementNotesCount,
          details: settlementNotesDetails.map(ndr => ({
            clientName: ndr.clientName,
            totalHours: ndr.subjects?.reduce((sum, s) => sum + (s.quantity || 0), 0) || 0,
            totalAmount: ndr.subjects?.reduce((sum, s) => sum + ((s.quantity || 0) * (s.hourlyRate || 0)), 0) || 0,
            status: ndr.status,
            date: new Date(ndr.createdAt).toLocaleDateString("fr-FR")
          }))
        }
      },
      totalItems: studentsCount + seriesCount + couponsCount + settlementNotesCount
    };

    console.log(`üîç Aper√ßu calcul√©: ${deletionPreview.totalItems} √©l√©ments √† supprimer`);
    res.json(deletionPreview);
  } catch (error) {
    console.error("Erreur lors du calcul de l'aper√ßu de suppression:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// @route   DELETE /api/families/:id
// @desc    Supprimer une famille
// @access  Private (Admin)
router.delete("/:id", authorize(["admin"]), async (req, res) => {
  try {
    const family = await Family.findById(req.params.id);

    if (!family) {
      return res.status(404).json({ message: "Famille non trouv√©e" });
    }

    console.log(`üîç D√©but de la suppression en cascade pour la famille ${req.params.id}`);

    // 1. Supprimer tous les coupons individuels li√©s √† cette famille
    const Coupon = require("../models/Coupon");
    const deletedCoupons = await Coupon.deleteMany({
      familyId: req.params.id,
    });
    console.log(`üîç ${deletedCoupons.deletedCount} coupons individuels supprim√©s`);

    // 2. Supprimer toutes les s√©ries de coupons li√©es √† cette famille
    const CouponSeries = require("../models/CouponSeries");
    const deletedSeries = await CouponSeries.deleteMany({
      familyId: req.params.id,
    });
    console.log(`üîç ${deletedSeries.deletedCount} s√©ries de coupons supprim√©es`);

    // 3. Supprimer les notes de r√®glement li√©es (NDR)
    const SettlementNote = require("../models/SettlementNote");
    const deletedSettlementNotes = await SettlementNote.deleteMany({
      familyId: req.params.id,
    });
    console.log(`üîç ${deletedSettlementNotes.deletedCount} notes de r√®glement supprim√©es`);

    // 4. Supprimer tous les √©l√®ves associ√©s √† cette famille
    console.log(`üîç Suppression des √©l√®ves pour la famille ${req.params.id}`);
    const deletedStudents = await Student.deleteMany({
      family: req.params.id,
    });
    console.log(`üîç ${deletedStudents.deletedCount} √©l√®ves supprim√©s`);

    // 5. Supprimer la famille elle-m√™me
    await Family.findByIdAndDelete(req.params.id);
    console.log(`üîç Famille ${req.params.id} supprim√©e avec succ√®s`);

    res.json({ 
      message: "Famille et tous les √©l√©ments li√©s supprim√©s avec succ√®s",
      deletedItems: {
        students: deletedStudents.deletedCount,
        couponSeries: deletedSeries.deletedCount,
        coupons: deletedCoupons.deletedCount,
        settlementNotes: deletedSettlementNotes.deletedCount
      }
    });
  } catch (error) {
    console.error("Erreur lors de la suppression de la famille:", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
});

// @route   PATCH /api/families/:id/next-action-date
// @desc    Mettre √† jour la date de prochaine action d'une famille
// @access  Private (Admin)
router.patch(
  "/:id/next-action-date",
  [
    authorize(["admin"]),
    body("nextActionDate")
      .optional()
      .custom((value) => {
        // Accepter null ou une date valide
        if (value === null || value === undefined) {
          return true;
        }
        const date = new Date(value);
        if (isNaN(date.getTime())) {
          throw new Error("Date invalide");
        }
        return true;
      })
      .withMessage("Date de prochaine action invalide"),
  ],
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "Donn√©es invalides",
          errors: errors.array(),
        });
      }

      const { nextActionDate } = req.body;
      
      const family = await Family.findByIdAndUpdate(
        req.params.id,
        { 
          nextActionDate: nextActionDate ? new Date(nextActionDate) : null,
          updatedAt: new Date()
        },
        { new: true, runValidators: true }
      );

      if (!family) {
        return res.status(404).json({ message: "Famille non trouv√©e" });
      }

      res.json({
        message: "Date de prochaine action mise √† jour avec succ√®s",
        family,
      });
    } catch (error) {
      console.error("Erreur lors de la mise √† jour de la date de prochaine action:", error);
      res.status(500).json({ message: "Erreur serveur" });
    }
  }
);

module.exports = router;
